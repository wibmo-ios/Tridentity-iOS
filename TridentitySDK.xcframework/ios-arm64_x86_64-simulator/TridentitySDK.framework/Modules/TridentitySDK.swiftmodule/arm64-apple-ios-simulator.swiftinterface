// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TridentitySDK
import AVFoundation
import Combine
import CommonCrypto
import CoreData
import CoreGraphics
import CoreLocation
import CoreTelephony
import CoreText
import CryptoKit
import Darwin
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import MachO
import MessageUI
import QuartzCore
import Security
import Swift
import SwiftUI
import SystemConfiguration
@_exported import TridentitySDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension QuartzCore.CALayer {
  public func logLayerTree(withIndent: Swift.Int = 0)
}
public protocol FBInterfaceMessaging {
  func registerToken(_ fcmToken: Swift.String?)
  func processFCM(notificationInfo userInfo: [Swift.AnyHashable : Any], clientInfo: TridentitySDK.ClientConfig?, navigation: UIKit.UINavigationController?)
}
public protocol TransactionInfo {
  var amount: Swift.String? { get }
  var merchantName: Swift.String? { get }
  var productId: Swift.String? { get }
  var timeStamp: Swift.Double { get }
  var expTimeStamp: Swift.Double { get }
  var type: Swift.String? { get }
  var transactionId: Swift.String? { get }
  var requesterTxnId: Swift.String? { get }
  var authenticationType: Swift.String? { get }
}
public protocol TransactionPayment {
  associatedtype Info : TridentitySDK.TransactionInfo
  var transaction: Self.Info { get }
  var paymentStatus: TridentitySDK.PushStatus { get }
}
@objc public class ClientConfig : ObjectiveC.NSObject {
  @objc public init(_ clientID: Swift.String, appID: Swift.String, apikey: Swift.String)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TDYPKHUDTextView : TridentitySDK.TDYPKHUDWideBaseView {
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TDYPKHUDAnimation {
  public static let discreteRotation: QuartzCore.CAAnimation
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TDYPKHUDProgressView : TridentitySDK.TDYPKHUDSquareBaseView, TridentitySDK.TDYPKHUDAnimating {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func stopAnimation()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class TDYPKHUDSuccessView : TridentitySDK.TDYPKHUDSquareBaseView, TridentitySDK.TDYPKHUDAnimating {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc open func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc open func stopAnimation()
  @objc deinit
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let SDKReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
@objc public protocol TDYPKHUDAnimating {
  @objc func startAnimation()
  @objc optional func stopAnimation()
}
@objc @_inheritsConvenienceInitializers open class TDYPKHUD : ObjectiveC.NSObject {
  public var viewToPresentOn: UIKit.UIView?
  public typealias TimerAction = (Swift.Bool) -> Swift.Void
  @available(*, deprecated, message: "Will be removed with Swift4 support, use gracePeriod instead")
  public var graceTime: Foundation.TimeInterval {
    get
    set(newPeriod)
  }
  public var gracePeriod: Swift.Double
  open class var sharedHUD: TridentitySDK.TDYPKHUD {
    get
  }
  @objc override dynamic public init()
  convenience public init(viewToPresentOn view: UIKit.UIView)
  @objc deinit
  open var dimsBackground: Swift.Bool
  open var userInteractionOnUnderlyingViewsEnabled: Swift.Bool {
    get
    set
  }
  open var isVisible: Swift.Bool {
    get
  }
  open var contentView: UIKit.UIView {
    get
    set
  }
  open var effect: UIKit.UIVisualEffect? {
    get
    set
  }
  open var leadingMargin: CoreFoundation.CGFloat
  open var trailingMargin: CoreFoundation.CGFloat
  open func show(onView view: UIKit.UIView? = nil)
  open func hide(animated anim: Swift.Bool = true, completion: TridentitySDK.TDYPKHUD.TimerAction? = nil)
  open func hide(_ animated: Swift.Bool, completion: TridentitySDK.TDYPKHUD.TimerAction? = nil)
  open func hide(afterDelay delay: Foundation.TimeInterval, completion: TridentitySDK.TDYPKHUD.TimerAction? = nil)
}
public func base32Encode(_ data: Foundation.Data) -> Swift.String
public func base32HexEncode(_ data: Foundation.Data) -> Swift.String
public func base32DecodeToData(_ string: Swift.String) -> Foundation.Data?
public func base32HexDecodeToData(_ string: Swift.String) -> Foundation.Data?
public func base32Encode(_ array: [Swift.UInt8]) -> Swift.String
public func base32HexEncode(_ array: [Swift.UInt8]) -> Swift.String
public func base32Decode(_ string: Swift.String) -> [Swift.UInt8]?
public func base32HexDecode(_ string: Swift.String) -> [Swift.UInt8]?
extension Swift.String {
  public var base32DecodedData: Foundation.Data? {
    get
  }
  public var base32EncodedString: Swift.String {
    get
  }
  public func base32DecodedString(_ encoding: Swift.String.Encoding = .utf8) -> Swift.String?
  public var base32HexDecodedData: Foundation.Data? {
    get
  }
  public var base32HexEncodedString: Swift.String {
    get
  }
  public func base32HexDecodedString(_ encoding: Swift.String.Encoding = .utf8) -> Swift.String?
}
extension Foundation.Data {
  public var base32EncodedString: Swift.String {
    get
  }
  public var base32EncodedData: Foundation.Data {
    get
  }
  public var base32DecodedData: Foundation.Data? {
    get
  }
  public var base32HexEncodedString: Swift.String {
    get
  }
  public var base32HexEncodedData: Foundation.Data {
    get
  }
  public var base32HexDecodedData: Foundation.Data? {
    get
  }
}
final public class TDYFloatValueProvider {
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  public init(block: @escaping TridentitySDK.TDYFloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  final public var valueType: any Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
public enum TDYHUDContentType {
  case success
  case error
  case progress
  case image(UIKit.UIImage?)
  case rotatingImage(UIKit.UIImage?)
  case labeledSuccess(title: Swift.String?, subtitle: Swift.String?)
  case labeledError(title: Swift.String?, subtitle: Swift.String?)
  case labeledProgress(title: Swift.String?, subtitle: Swift.String?)
  case labeledImage(image: UIKit.UIImage?, title: Swift.String?, subtitle: Swift.String?)
  case labeledRotatingImage(image: UIKit.UIImage?, title: Swift.String?, subtitle: Swift.String?)
  case label(Swift.String?)
  case systemActivity
  case customView(view: UIKit.UIView)
}
@_hasMissingDesignatedInitializers final public class TDYHUD {
  public static var dimsBackground: Swift.Bool {
    get
    set
  }
  public static var allowsInteraction: Swift.Bool {
    get
    set
  }
  public static var leadingMargin: CoreFoundation.CGFloat {
    get
    set
  }
  public static var trailingMargin: CoreFoundation.CGFloat {
    get
    set
  }
  public static var isVisible: Swift.Bool {
    get
  }
  public static func show(_ content: TridentitySDK.TDYHUDContentType, onView view: UIKit.UIView? = nil)
  public static func hide(_ completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func hide(animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func hide(afterDelay delay: Foundation.TimeInterval, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func flash(_ content: TridentitySDK.TDYHUDContentType, onView view: UIKit.UIView? = nil)
  public static func flash(_ content: TridentitySDK.TDYHUDContentType, onView view: UIKit.UIView? = nil, delay: Foundation.TimeInterval, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func registerForKeyboardNotifications()
  public static func deregisterFromKeyboardNotifications()
  @objc deinit
}
public class TDYAsset : Swift.Codable {
  final public let id: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TDYPKHUDWideBaseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.Data {
  public var bytes: [Swift.UInt8] {
    get
  }
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public protocol AuthenticatorTheme {
  var primaryColor: UIKit.UIColor { get }
  var secondaryColor: UIKit.UIColor { get }
  var backgroundColor: UIKit.UIColor { get }
  var navigationBar: UIKit.UIColor { get }
  var bottomBar: UIKit.UIColor { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CameraHandler : ObjectiveC.NSObject {
  public static let managerInstance: TridentitySDK.CameraHandler
  public var errorAlert: UIKit.UIAlertController?
  public func checkAndGetCamera() throws
  @objc deinit
}
extension TridentitySDK.CameraHandler : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
@objc @_Concurrency.MainActor(unsafe) open class TDYPKHUDErrorView : TridentitySDK.TDYPKHUDSquareBaseView, TridentitySDK.TDYPKHUDAnimating {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func stopAnimation()
  @objc deinit
}
@objc public protocol TridentSDKDelegate {
  @objc func fetchStatus(data: [Swift.String : Any])
}
@objc @_inheritsConvenienceInitializers public class TridentitySDKInterface : ObjectiveC.NSObject {
  @objc public static var sharedAuth: TridentitySDK.TridentitySDKInterface?
  @objc weak public var tridentSDKDelegate: (any TridentitySDK.TridentSDKDelegate)?
  weak public var notificationDelegate: (any TridentitySDK.NotificationState)?
  @objc override dynamic public init()
  @objc deinit
}
extension TridentitySDK.TridentitySDKInterface {
  @objc dynamic public func configureSDK(withClientReq clientInfo: TridentitySDK.ClientConfig, appTheme: Foundation.NSDictionary?, environment: Swift.String?)
  public func invokeSDK(withMobileNumber mobile: Swift.String, fcmToken: Swift.String, presenter navigationViewController: UIKit.UINavigationController)
  public func openScanner(currentViewCtrl onViewCtrl: UIKit.UIViewController)
  public func openTransaction(forScannedData info: [Swift.AnyHashable : Any])
  @objc dynamic public func registration(withMobileNumber mobile: Swift.String, fcmToken: Swift.String, presenter navigationViewController: UIKit.UINavigationController)
  @objc dynamic public func isRegistered(withCustomerID customerID: Swift.String?, mobileNumber: Swift.String?, completionHandler: @escaping (Swift.Bool, [Swift.String : Any]?) -> Swift.Void)
  public func saveAES(_ devAes: Swift.String, _ qaAes: Swift.String, _ uatAes: Swift.String)
  @objc dynamic public func validateToken(token: Swift.String, channel: Swift.String, completionHandler: @escaping (TridentitySDK.TDYTokenValidateResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func registerToken(_ fcmToken: Swift.String?)
}
extension TridentitySDK.TridentitySDKInterface : TridentitySDK.FBInterfaceMessaging {
  @objc dynamic public func wakeupApp(NotificationInfo userInfo: [Swift.AnyHashable : Any])
  @objc dynamic public func processFCM(notificationInfo userInfo: [Swift.AnyHashable : Any], clientInfo: TridentitySDK.ClientConfig? = nil, navigation: UIKit.UINavigationController? = nil)
  public func saveQR(userInfo: [Swift.AnyHashable : Any])
}
public enum KeyChainKey : Swift.String, Swift.Codable {
  case clientId
  case consentId
  case featureId
  case customerId
  case apiKey
  case aesKey
  case offlineOtp
  case deviceUUID
  case simID
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeyChain {
  public static let shareKC: TridentitySDK.KeyChain
  public func appKeys() -> [Swift.String]
  public func userKeys() -> [Swift.String]
  public func allKeys() -> [Swift.String]
  public func removeAll() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TDYPKHUDSquareBaseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TDYPKHUDRotatingImageView : TridentitySDK.TDYPKHUDSquareBaseView, TridentitySDK.TDYPKHUDAnimating {
  @_Concurrency.MainActor(unsafe) @objc public func startAnimation()
  @_Concurrency.MainActor(unsafe) @objc public func stopAnimation()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(image: UIKit.UIImage? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil)
  @objc deinit
}
public enum WibmoAuthenticatorError : Swift.Error {
  public var domain: Swift.String {
    get
  }
  public enum RegisterFailedReason {
    case pvcRetry
    case bindingFailed
    case smsSendError(reason: TridentitySDK.WibmoAuthenticatorError.SmsSendFailureReason)
    case invalidToken
    case mobileNumberMismatch
  }
  public enum ConnectionFailureReason {
    case noInternetAccess
    case timeOut
    case unknown
    case cancelled
    public static func == (a: TridentitySDK.WibmoAuthenticatorError.ConnectionFailureReason, b: TridentitySDK.WibmoAuthenticatorError.ConnectionFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ServerResponseFailure {
    case serverError(Swift.String?)
  }
  public enum CreationFailureReason {
    case keyEmpty(Swift.String)
    case valueEmpty(Swift.String)
    case unknown(any Swift.Error)
  }
  public enum SmsSendFailureReason {
    case cancelled
    case failed
    case notAvailable
    case invalidToken
    case eventTimeout
    public static func == (a: TridentitySDK.WibmoAuthenticatorError.SmsSendFailureReason, b: TridentitySDK.WibmoAuthenticatorError.SmsSendFailureReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BioError {
    case passcodeEnrollfailed
    case biometricEnrollfailed
    case failed
    case cancelled
    case authlocked
    case unknown
    public static func == (a: TridentitySDK.WibmoAuthenticatorError.BioError, b: TridentitySDK.WibmoAuthenticatorError.BioError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case responseSerializeFailed
  case responseObjectCreationFailed(reason: TridentitySDK.WibmoAuthenticatorError.CreationFailureReason)
  case connectionError(reason: TridentitySDK.WibmoAuthenticatorError.ConnectionFailureReason)
  case serverResponse(reason: TridentitySDK.WibmoAuthenticatorError.ServerResponseFailure)
  case unknownError
  case registerFailed(reason: TridentitySDK.WibmoAuthenticatorError.RegisterFailedReason)
  case requestURLNotfound
  case userAuthenticationFailed(reason: TridentitySDK.WibmoAuthenticatorError.BioError)
  case savetoKeyChainFailed
  case failedByReason(Swift.String)
  case updateTrnxFailed(reason: Swift.String)
}
extension TridentitySDK.WibmoAuthenticatorError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class TDYPKHUDSystemActivityIndicatorView : TridentitySDK.TDYPKHUDSquareBaseView, TridentitySDK.TDYPKHUDAnimating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc final public func startAnimation()
  @objc deinit
}
public protocol NotificationState : AnyObject {
  func doClearNotification(_ trnxID: Swift.String?)
  func recievedNotification(_ trnxID: Swift.String?)
}
public enum TDYOTPAlgorithm {
  case sha1
  case sha256
  case sha512
  public static func == (a: TridentitySDK.TDYOTPAlgorithm, b: TridentitySDK.TDYOTPAlgorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class TransactionDetail : ObjectiveC.NSObject {
  public var amount: Swift.String
  public var merchantName: Swift.String
  public var timeStamp: Swift.Double
  public var expTimeStamp: Swift.Double
  public var type: Swift.String?
  public var transactionId: Swift.String
  public var authenticationType: Swift.String
  public var expireTimer: Foundation.Timer?
  @objc deinit
}
public struct TDYHOTP {
  public let secret: Foundation.Data
  public let digits: Swift.Int
  public let algorithm: TridentitySDK.TDYOTPAlgorithm
  public init?(secret: Foundation.Data, digits: Swift.Int = 6, algorithm: TridentitySDK.TDYOTPAlgorithm = .sha1)
  public func generate(counter: Swift.UInt64) -> Swift.String?
}
public enum ServerDownState : Swift.String {
  case initial
  case processing
  case failed
  case success
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FeatureResult : Swift.String {
  case push
  case offline
  case bioMetric
  case qrType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PushStatus : Swift.String, Swift.Codable {
  case accept
  case decline
  case expired
  case cancelled
  case notMyTransaction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias URLString = Swift.String
public func print(_ items: Swift.String..., function: Swift.String = #function, separator: Swift.String = " ", terminator: Swift.String = "\n")
extension Swift.Array where Element == Swift.UInt8 {
  public func toHexString() -> Swift.String
}
@objc @_inheritsConvenienceInitializers open class PKHUDAssets : ObjectiveC.NSObject {
  open class var crossImage: UIKit.UIImage {
    get
  }
  open class var checkmarkImage: UIKit.UIImage {
    get
  }
  open class var progressActivityImage: UIKit.UIImage {
    get
  }
  open class var progressCircularImage: UIKit.UIImage {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum WibmoSTORYBOARD : Swift.String {
  case land
  case activity
  case transaction
  case offline
  case home
  case alert
  case camera
  case terms
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TDYTOTP {
  public let secret: Foundation.Data
  public let digits: Swift.Int
  public let timeInterval: Swift.Int
  public let algorithm: TridentitySDK.TDYOTPAlgorithm
  public init?(secret: Foundation.Data, digits: Swift.Int = 6, timeInterval: Swift.Int = 30, algorithm: TridentitySDK.TDYOTPAlgorithm = .sha1)
  public func generate(time: Foundation.Date) -> Swift.String?
  public func generate(secondsPast1970: Swift.Int) -> Swift.String?
}
@objc public class TDYTokenValidateResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let status: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TDYLottieView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TridentitySDK.KeyChainKey : Swift.Equatable {}
extension TridentitySDK.KeyChainKey : Swift.Hashable {}
extension TridentitySDK.KeyChainKey : Swift.RawRepresentable {}
extension TridentitySDK.WibmoAuthenticatorError.ConnectionFailureReason : Swift.Equatable {}
extension TridentitySDK.WibmoAuthenticatorError.ConnectionFailureReason : Swift.Hashable {}
extension TridentitySDK.WibmoAuthenticatorError.SmsSendFailureReason : Swift.Equatable {}
extension TridentitySDK.WibmoAuthenticatorError.SmsSendFailureReason : Swift.Hashable {}
extension TridentitySDK.WibmoAuthenticatorError.BioError : Swift.Equatable {}
extension TridentitySDK.WibmoAuthenticatorError.BioError : Swift.Hashable {}
extension TridentitySDK.TDYOTPAlgorithm : Swift.Equatable {}
extension TridentitySDK.TDYOTPAlgorithm : Swift.Hashable {}
extension TridentitySDK.ServerDownState : Swift.Equatable {}
extension TridentitySDK.ServerDownState : Swift.Hashable {}
extension TridentitySDK.ServerDownState : Swift.RawRepresentable {}
extension TridentitySDK.FeatureResult : Swift.Equatable {}
extension TridentitySDK.FeatureResult : Swift.Hashable {}
extension TridentitySDK.FeatureResult : Swift.RawRepresentable {}
extension TridentitySDK.PushStatus : Swift.Equatable {}
extension TridentitySDK.PushStatus : Swift.Hashable {}
extension TridentitySDK.PushStatus : Swift.RawRepresentable {}
extension TridentitySDK.WibmoSTORYBOARD : Swift.Equatable {}
extension TridentitySDK.WibmoSTORYBOARD : Swift.Hashable {}
extension TridentitySDK.WibmoSTORYBOARD : Swift.RawRepresentable {}
